/**
 * Database Configuration
 * Configura√ß√£o unificada para conex√£o com PostgreSQL
 * Suporta tanto DATABASE_URL (Render/Produ√ß√£o) quanto vari√°veis individuais (Local)
 */

import { Pool, PoolConfig } from 'pg';
import dotenv from 'dotenv';
import { createLogger } from '../shared/logger';

// Carregar vari√°veis de ambiente
dotenv.config();
const logger = createLogger('database-config');

/**
 * Cria configura√ß√£o do banco usando DATABASE_URL
 */
function createDatabaseConfig(): PoolConfig {
  // Verificar se DATABASE_URL est√° presente
  if (!process.env.DATABASE_URL || process.env.DATABASE_URL === '') {
    console.error('‚ùå DATABASE_URL n√£o encontrada!');
    console.error('Configure a vari√°vel DATABASE_URL no Render ou arquivo .env');
    throw new Error('DATABASE_URL √© obrigat√≥ria para conex√£o com banco');
  }

  console.log('üîó Usando DATABASE_URL para conex√£o');
  console.log('üîç DATABASE_URL detectada:', process.env.DATABASE_URL.substring(0, 20) + '...');
  
  const config: PoolConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' 
      ? { rejectUnauthorized: false } // Necess√°rio para Render
      : false,
    // Pool settings otimizados
    max: parseInt(process.env.DB_POOL_MAX || '20'),
    min: parseInt(process.env.DB_POOL_MIN || '2'),
    idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),
    connectionTimeoutMillis: parseInt(process.env.DB_CONNECTION_TIMEOUT || '2000'),
  };

  // Log da conex√£o (sem expor senha)
  const urlParts = process.env.DATABASE_URL.split('@');
  const hostInfo = urlParts[1] || 'unknown';
  console.log(`üìç Conectando ao banco: ${hostInfo.split('/')[0]}`);
  
  return config;
}

/**
 * Pool de conex√µes do PostgreSQL
 */
export const pool = new Pool(createDatabaseConfig());

/**
 * Testa a conex√£o com o banco
 */
export async function testConnection(): Promise<boolean> {
  try {
    const result = await pool.query('SELECT NOW()');
    const dbTime = result.rows[0].now;
    
    console.log('‚úÖ Banco de dados conectado com sucesso');
    console.log(`‚è∞ Hora do banco: ${dbTime}`);
    logger.info('Database connection established', { 
      timestamp: dbTime,
      environment: process.env.NODE_ENV 
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco:', error);
    logger.error('Database connection failed', { 
      error: (error as Error).message 
    });
    
    // Em produ√ß√£o, n√£o queremos que a aplica√ß√£o continue sem banco
    if (process.env.NODE_ENV === 'production') {
      console.error('üõë Aplica√ß√£o n√£o pode continuar sem conex√£o com banco em produ√ß√£o');
      process.exit(1);
    }
    
    console.log('‚ö†Ô∏è Continuando em desenvolvimento sem conex√£o de banco (apenas para testes de API)');
    
    return false;
  }
}

/**
 * Executa query com retry autom√°tico
 */
export async function queryWithRetry(
  text: string, 
  params?: any[], 
  maxRetries: number = 3
): Promise<any> {
  let lastError: Error | null = null;
  
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await pool.query(text, params);
    } catch (error) {
      lastError = error as Error;
      
      // Se √© erro de conex√£o, tenta reconectar
      if (lastError.message.includes('connection')) {
        console.log(`‚ö†Ô∏è Tentativa ${i + 1}/${maxRetries} de reconex√£o...`);
        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1))); // Backoff exponencial
        continue;
      }
      
      // Se √© outro tipo de erro, n√£o tenta novamente
      throw error;
    }
  }
  
  throw lastError;
}

/**
 * Fecha o pool de conex√µes (graceful shutdown)
 */
export async function closePool(): Promise<void> {
  try {
    await pool.end();
    console.log('üîå Pool de conex√µes fechado');
    logger.info('Database connection pool closed');
  } catch (error) {
    console.error('‚ùå Erro ao fechar pool:', error);
    logger.error('Error closing database pool', { 
      error: (error as Error).message 
    });
  }
}

/**
 * Health check do banco
 */
export async function healthCheck(): Promise<{
  connected: boolean;
  latency?: number;
  error?: string;
}> {
  const startTime = Date.now();
  
  try {
    await pool.query('SELECT 1');
    const latency = Date.now() - startTime;
    
    return {
      connected: true,
      latency
    };
  } catch (error) {
    return {
      connected: false,
      error: (error as Error).message
    };
  }
}

// Graceful shutdown handlers
process.on('SIGTERM', async () => {
  console.log('üìõ SIGTERM recebido, fechando conex√µes...');
  await closePool();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üìõ SIGINT recebido, fechando conex√µes...');
  await closePool();
  process.exit(0);
});

// Export configura√ß√£o para debug (sem senha)
export function getDatabaseInfo() {
  if (!process.env.DATABASE_URL) {
    return { type: 'DATABASE_URL', error: 'DATABASE_URL n√£o configurada' };
  }

  const url = process.env.DATABASE_URL;
  const parts = url.split('@');
  const hostInfo = parts[1] || 'unknown';
  
  return {
    type: 'DATABASE_URL',
    host: hostInfo.split('/')[0],
    ssl: process.env.NODE_ENV === 'production'
  };
}
