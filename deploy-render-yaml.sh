#!/bin/bash

# Script de Deploy Automatizado para Render usando render.yaml
# Este script prepara e faz deploy da aplica√ß√£o com PostgreSQL gerenciado

set -e  # Parar em caso de erro

echo "üöÄ Deploy Automatizado para Render com render.yaml"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "render.yaml" ]; then
    error "render.yaml n√£o encontrado. Execute este script na raiz do projeto"
    exit 1
fi

if [ ! -f "Dockerfile.render" ]; then
    error "Dockerfile.render n√£o encontrado"
    exit 1
fi

log "Verificando pr√©-requisitos..."

# Verificar se git est√° instalado
if ! command -v git &> /dev/null; then
    error "git n√£o est√° instalado"
    exit 1
fi

# Verificar se estamos em um reposit√≥rio git
if [ ! -d ".git" ]; then
    error "Este n√£o √© um reposit√≥rio git. Execute 'git init' primeiro"
    exit 1
fi

success "Pr√©-requisitos verificados"

# Verificar status do git
log "Verificando status do git..."
if [ -n "$(git status --porcelain)" ]; then
    warning "H√° mudan√ßas n√£o commitadas:"
    git status --short
    
    echo ""
    warning "Deseja fazer commit das mudan√ßas? (y/N)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        log "Fazendo commit das mudan√ßas..."
        git add .
        git commit -m "feat: prepare for Render deploy with render.yaml"
        success "Commit realizado"
    else
        warning "Continuando sem commit..."
    fi
fi

# Verificar se h√° commits para push
current_branch=$(git branch --show-current)
if [ -z "$(git log origin/$current_branch..HEAD 2>/dev/null)" ]; then
    warning "N√£o h√° commits novos para push"
    log "Deseja fazer push mesmo assim? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        log "Deploy cancelado"
        exit 0
    fi
fi

# Verificar se o reposit√≥rio remoto est√° configurado
if ! git remote get-url origin &> /dev/null; then
    error "Reposit√≥rio remoto n√£o configurado"
    log "Configure o reposit√≥rio remoto com:"
    log "git remote add origin https://github.com/SEU_USUARIO/portal-services-api.git"
    exit 1
fi

# Mostrar informa√ß√µes do reposit√≥rio
log "Informa√ß√µes do reposit√≥rio:"
echo "  - Branch atual: $current_branch"
echo "  - Reposit√≥rio remoto: $(git remote get-url origin)"

# Fazer push para o reposit√≥rio
log "Fazendo push para o reposit√≥rio..."
git push origin "$current_branch"

success "Push conclu√≠do"

# Gerar URL de deploy
repo_url=$(git remote get-url origin)
if [[ $repo_url == *"github.com"* ]]; then
    # Extrair usu√°rio e reposit√≥rio da URL
    if [[ $repo_url == *"https://github.com/"* ]]; then
        repo_path=$(echo $repo_url | sed 's|https://github.com/||' | sed 's|\.git$||')
        deploy_url="https://render.com/deploy?repo=https://github.com/$repo_path"
    else
        deploy_url="https://render.com/deploy?repo=$repo_url"
    fi
else
    deploy_url="https://render.com"
fi

# Instru√ß√µes finais
echo ""
echo "üéâ Deploy iniciado com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Acesse o Render: $deploy_url"
echo "2. Clique em 'Deploy' para usar o render.yaml"
echo "3. O Render criar√° automaticamente:"
echo "   - PostgreSQL gerenciado (portal-services-db)"
echo "   - API web service (portal-services-api)"
echo "   - Todas as vari√°veis de ambiente"
echo ""
echo "üîç O que o render.yaml far√° automaticamente:"
echo "‚úÖ Criar banco PostgreSQL gerenciado"
echo "‚úÖ Configurar todas as vari√°veis de ambiente"
echo "‚úÖ Fazer build da aplica√ß√£o com Docker"
echo "‚úÖ Conectar API ao banco automaticamente"
echo "‚úÖ Inicializar banco com tabelas e dados"
echo ""
echo "‚è±Ô∏è Tempo estimado: 5-10 minutos"
echo ""
echo "üîç Para monitorar:"
echo "- Acesse o painel do Render"
echo "- Verifique os logs de build e deploy"
echo "- Teste: https://portal-services-api.onrender.com/health"
echo ""
echo "üìö Documenta√ß√£o: DEPLOY_RENDER_NEW_STRATEGY.md"

success "Deploy script conclu√≠do!"
echo ""
echo "üöÄ Acesse agora: $deploy_url"
