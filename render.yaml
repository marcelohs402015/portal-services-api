# =====================================================
# Portal Services - Render.com Blueprint Configuration
# Sistema de gestão de serviços e orçamentos com IA
# Baseado no package.json v2.0.0
# =====================================================

databases:
  - name: portal-services-db
    databaseName: portalservicesdb
    user: admin
    plan: starter
    region: oregon

services:
  # =====================================================
  # Backend Service - API Server
  # =====================================================
  - type: web
    name: portal-services-backend
    runtime: node
    plan: starter
    region: oregon
    
    # Comandos de build baseados no package.json
    buildCommand: |
      echo "🚀 Portal Services - Build Backend"
      echo "=================================="
      
      # Instalar dependências do projeto principal
      echo "📦 Instalando dependências principais..."
      npm ci --silent
      
      # Instalar dependências do backend
      echo "📦 Instalando dependências do backend..."
      cd appserver
      npm ci --silent --production=false
      
      # Verificar TypeScript
      echo "🔍 Verificando TypeScript..."
      npm run typecheck
      
      # Criar diretório de logs se não existir
      echo "📁 Criando diretório de logs..."
      mkdir -p logs
      
      echo "✅ Build do backend concluído!"

    # Comando de start otimizado
    startCommand: |
      echo "🚀 Iniciando Portal Services Backend..."
      cd appserver
      echo "📊 Versão Node: $(node --version)"
      echo "📊 Versão NPM: $(npm --version)"
      echo "🌐 Iniciando servidor na porta $PORT..."
      npx tsx server.ts
    
    # Health check endpoint
    healthCheckPath: /health
    
    # Configurações de auto-deploy
    autoDeploy: true
    branch: main
    
    # Variáveis de ambiente
    envVars:
      # Configurações básicas
      - key: NODE_ENV
        value: production
      - key: DATA_MODE
        value: real
      - key: PORT
        value: "10000"
      
      # Configurações do banco de dados
      - key: DATABASE_URL
        fromDatabase:
          name: portal-services-db
          property: connectionString
      - key: DB_SSL
        value: "true"
      - key: DB_HOST
        fromDatabase:
          name: portal-services-db
          property: host
      - key: DB_PORT
        fromDatabase:
          name: portal-services-db
          property: port
      - key: DB_NAME
        fromDatabase:
          name: portal-services-db
          property: database
      - key: DB_USER
        fromDatabase:
          name: portal-services-db
          property: user
      - key: DB_PASSWORD
        fromDatabase:
          name: portal-services-db
          property: password
      
      # Configurações de segurança
      - key: JWT_SECRET
        generateValue: true
      - key: SESSION_SECRET
        generateValue: true
      
      # Configurações de email (Gmail API)
      - key: GMAIL_CLIENT_ID
        value: "your-gmail-client-id"
      - key: GMAIL_CLIENT_SECRET
        value: "your-gmail-client-secret"
      - key: GMAIL_REFRESH_TOKEN
        value: "your-gmail-refresh-token"

  # =====================================================
  # Frontend Service - React Application
  # =====================================================
  - type: web
    name: portal-services-frontend
    runtime: static
    plan: starter
    
    # Comandos de build baseados no package.json
    buildCommand: |
      echo "🚀 Portal Services - Build Frontend"
      echo "==================================="
      
      # Instalar dependências do projeto principal
      echo "📦 Instalando dependências principais..."
      npm ci --silent
      
      # Instalar dependências do frontend
      echo "📦 Instalando dependências do frontend..."
      cd appclient
      npm ci --legacy-peer-deps --silent
      
      # Verificar TypeScript
      echo "🔍 Verificando TypeScript..."
      npm run typecheck
      
      # Build do frontend
      echo "🔨 Compilando React..."
      npm run build
      
      echo "✅ Build do frontend concluído!"
    
    # Caminho dos arquivos estáticos
    rootDir: ./appclient/build
    
    # Configurações de auto-deploy
    autoDeploy: true
    branch: main
    
    # Variáveis de ambiente do frontend
    envVars:
      - key: REACT_APP_API_URL
        value: https://portal-services-backend.onrender.com
      - key: REACT_APP_ENVIRONMENT
        value: production
      - key: GENERATE_SOURCEMAP
        value: "false"
      - key: CI
        value: "false"

  # =====================================================
  # Database Setup Service (Cron Job)
  # =====================================================
  - type: cron
    name: portal-services-db-setup
    plan: starter
    runtime: node
    
    # Comando para setup do banco
    buildCommand: |
      echo "🚀 Portal Services - Setup Database"
      echo "==================================="
      cd appserver
      npm ci --silent --production=false
    
    # Comando para executar setup
    startCommand: |
      echo "🗄️ Configurando banco de dados..."
      cd appserver
      npm run setup
    
    # Executar uma vez por dia
    schedule: "0 0 * * *"
    
    # Variáveis de ambiente
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: portal-services-db
          property: connectionString
      - key: DB_SSL
        value: "true"

  # =====================================================
  # Health Check Service (Cron Job)
  # =====================================================
  - type: cron
    name: portal-services-health-check
    plan: starter
    runtime: node
    
    # Comando para health check
    buildCommand: |
      echo "🚀 Portal Services - Health Check Setup"
      echo "======================================="
      cd appserver
      npm ci --silent --production=false
    
    # Comando para executar health check
    startCommand: |
      echo "🔍 Executando health check..."
      cd appserver
      npm run healthcheck
    
    # Executar a cada 5 minutos
    schedule: "*/5 * * * *"
    
    # Variáveis de ambiente
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: portal-services-db
          property: connectionString
      - key: DB_SSL
        value: "true"