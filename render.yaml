# Portal Services API - Render Blueprint Configuration
# Configuração otimizada para deploy automático no Render
#
# Como usar:
# 1. Acesse render.com
# 2. Clique em "New +" -> "Blueprint"
# 3. Conecte seu repositório Git
# 4. O Render detectará automaticamente este arquivo
# 5. Configure as variáveis de ambiente necessárias
# 6. Clique em "Apply" para criar os serviços

services:
  # PostgreSQL Database Service
  - type: pserv
    name: portal-services-db
    plan: starter
    region: oregon
    envVars:
      - key: POSTGRES_USER
        value: portaladmin
      - key: POSTGRES_PASSWORD
        generateValue: true
      - key: POSTGRES_DB
        value: portalservicesdb

  # Portal Services API Web Service
  - type: web
    name: portal-services-api
    runtime: node
    plan: starter
    region: oregon
    buildCommand: |
      npm install &&
      cd appserver &&
      npm install &&
      npm run build
    startCommand: cd appserver && npm start
    envVars:
      # Server Configuration
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: HOST
        value: 0.0.0.0
      - key: APP_VERSION
        value: 2.0.0

      # Database Configuration (conecta automaticamente com o serviço PostgreSQL)
      - key: DB_HOST
        fromService:
          type: pserv
          name: portal-services-db
          property: host
      - key: DB_PORT
        fromService:
          type: pserv
          name: portal-services-db
          property: port
      - key: DB_NAME
        fromService:
          type: pserv
          name: portal-services-db
          property: database
      - key: DB_USER
        fromService:
          type: pserv
          name: portal-services-db
          property: user
      - key: DB_PASSWORD
        fromService:
          type: pserv
          name: portal-services-db
          property: password
      - key: DB_SSL
        value: "true"
      - key: DATABASE_URL
        fromService:
          type: pserv
          name: portal-services-db
          property: connectionString

      # API Configuration
      - key: API_URL
        value: https://portal-services-api.onrender.com
      - key: API_BASE_URL
        value: https://portal-services-api.onrender.com
      - key: FRONTEND_URL
        value: https://portal-services-api.onrender.com

      # Security - Secrets gerados automaticamente pelo Render
      - key: JWT_SECRET
        generateValue: true
      - key: SESSION_SECRET
        generateValue: true

      # Application Features
      - key: FEATURES
        value: email-management,service-management,quotations

      # Logging
      - key: LOG_LEVEL
        value: info

      # Application Settings
      - key: MAX_REQUEST_SIZE
        value: 10mb
      - key: REQUEST_TIMEOUT
        value: 30000

      # Health Check Configuration
      - key: HEALTH_CHECK_TIMEOUT
        value: 5000
      - key: HEALTH_CHECK_INTERVAL
        value: 30000

      # Render Environment Flag
      - key: RENDER_ENV
        value: "true"

    # Health check endpoint
    healthCheckPath: /health

    # Auto deploy on push to main branch
    autoDeploy: true

    # Enable pull request previews
    pullRequestPreviewsEnabled: true

    # Disk storage for logs
    disk:
      name: portal-services-storage
      mountPath: /app/logs
      sizeGB: 1

# Environment Variable Groups para variáveis compartilhadas
envVarGroups:
  - name: portal-services-shared
    envVars:
      - key: COMPANY_NAME
        value: Portal Services
      - key: COMPANY_EMAIL
        value: contato@portalservices.com
      - key: COMPANY_PHONE
        value: "(11) 99999-9999"
      - key: DEFAULT_QUOTATION_VALIDITY
        value: "30"
      - key: EMAIL_AUTO_RESPONSE
        value: "true"