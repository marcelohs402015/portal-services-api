# Portal Services API - Render Blueprint Configuration
# Configuração completa para deploy automático no Render
# 
# Como usar:
# 1. Acesse render.com
# 2. Clique em "New +" -> "Blueprint"
# 3. Conecte seu repositório Git
# 4. O Render detectará automaticamente este arquivo
# 5. Clique em "Apply" para criar os serviços

services:
  # PostgreSQL Database Service
  - type: pserv
    name: portal-services-db
    runtime: docker
    plan: starter
    dockerfilePath: ./Dockerfile.db
    envVars:
      - key: POSTGRES_USER
        value: admin
      - key: POSTGRES_PASSWORD
        generateValue: true
      - key: POSTGRES_DB
        value: portalservicesdb
      - key: POSTGRES_INITDB_ARGS
        value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthCheckPath: /health
    autoDeploy: true
    region: oregon

  # Portal Services API Web Service
  - type: web
    name: portal-services-api
    runtime: node
    plan: starter
    buildCommand: |
      cd appserver && 
      npm install && 
      npm run build && 
      npm run init-db
    startCommand: cd appserver && npm start
    envVars:
      # Server Configuration
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: APP_VERSION
        value: 2.0.0
      - key: FEATURES
        value: email-management,service-management,quotations
      
      # Database Configuration (Render PostgreSQL)
      - key: DB_HOST
        fromService:
          type: pserv
          name: portal-services-db
          property: host
      - key: DB_PORT
        fromService:
          type: pserv
          name: portal-services-db
          property: port
      - key: DB_NAME
        fromService:
          type: pserv
          name: portal-services-db
          property: database
      - key: DB_USER
        fromService:
          type: pserv
          name: portal-services-db
          property: user
      - key: DB_PASSWORD
        fromService:
          type: pserv
          name: portal-services-db
          property: password
      - key: DB_SSL
        value: "true"
      
      # API Configuration
      - key: API_URL
        value: https://portal-services-api.onrender.com
      - key: API_BASE_URL
        value: https://portal-services-api.onrender.com
      - key: FRONTEND_URL
        value: https://portal-services-api.onrender.com
      
      # Logging
      - key: LOG_LEVEL
        value: info
      
      # Security (Generated by Render)
      - key: JWT_SECRET
        generateValue: true
      - key: SESSION_SECRET
        generateValue: true
      
      # Application Settings
      - key: MAX_REQUEST_SIZE
        value: 10mb
      - key: REQUEST_TIMEOUT
        value: 30000
      
      # Health Check Configuration
      - key: HEALTH_CHECK_TIMEOUT
        value: 5000
      - key: HEALTH_CHECK_INTERVAL
        value: 30000
      
      # Render specific settings
      - key: HOST
        value: 0.0.0.0
      - key: RENDER_ENV
        value: "true"
    
    healthCheckPath: /health
    autoDeploy: true
    pullRequestPreviewsEnabled: true
    region: oregon
    disk:
      name: portal-services-storage
      mountPath: /app/logs
      sizeGB: 1

# Static Site (opcional - para documentação)
staticSites:
  - name: portal-services-docs
    buildCommand: echo "Documentation site"
    publishPath: ./docs
    envVars:
      - key: API_URL
        value: https://portal-services-api.onrender.com
    routes:
      - type: rewrite
        source: /api/*
        destination: https://portal-services-api.onrender.com/api/*
    autoDeploy: true
    region: oregon

# Environment Groups (para variáveis compartilhadas)
envVarGroups:
  - name: portal-services-shared
    envVars:
      - key: COMPANY_NAME
        value: Portal Services
      - key: COMPANY_EMAIL
        value: contato@portalservices.com
      - key: COMPANY_PHONE
        value: "(11) 99999-9999"
      - key: DEFAULT_QUOTATION_VALIDITY
        value: "30"
      - key: EMAIL_AUTO_RESPONSE
        value: "true"

# Custom Domains (opcional)
customDomains:
  - domain: api.portalservices.com
    service: portal-services-api
  - domain: docs.portalservices.com
    service: portal-services-docs

# Cron Jobs (opcional - para tarefas agendadas)
cronJobs:
  - name: portal-services-cleanup
    schedule: "0 2 * * *"  # Diariamente às 2h
    command: cd appserver && node scripts/cleanup.js
    envVars:
      - key: NODE_ENV
        value: production
    region: oregon
