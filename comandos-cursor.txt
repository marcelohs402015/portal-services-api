# üöÄ Comandos para Terminal do Cursor - Portal Services

## PASSO 1: PREPARAR PROJETO
# Execute estes comandos no terminal do Cursor (Ctrl + `)

# 1.1 Executar setup autom√°tico
./setup-supabase.sh

# 1.2 Instalar depend√™ncias (se n√£o executou o script)
cd appclient
npm install @supabase/supabase-js
cd ..

# 1.3 Instalar Vercel CLI
npm install -g vercel

## PASSO 2: CONFIGURAR SUPABASE
# (Feito no browser - supabase.com)
# - Criar projeto: portal-services  
# - Senha: Admin@123#2025
# - Executar SQL: supabase-schema.sql

## PASSO 3: CONFIGURAR VARI√ÅVEIS
# Editar arquivo: appclient/.env.local
# (Use o editor do Cursor para criar/editar)

## PASSO 4: TESTAR LOCAL
cd appclient
npm start

## PASSO 5: DEPLOY VERCEL
# 5.1 Login
vercel login

# 5.2 Deploy
cd appclient
vercel --prod

# 5.3 Configurar env vars no Vercel (via CLI)
vercel env add REACT_APP_SUPABASE_URL
vercel env add REACT_APP_SUPABASE_ANON_KEY

# 5.4 Redeploy ap√≥s configurar vars
vercel --prod

## COMANDOS √öTEIS PARA MONITORAMENTO

# Ver logs do Vercel
vercel logs

# Ver logs em tempo real
vercel logs --follow

# Ver informa√ß√µes do projeto
vercel ls

# Ver dom√≠nios
vercel domains ls

## COMANDOS GIT (se usar integra√ß√£o GitHub)
git add .
git commit -m "feat: deploy to Supabase + Vercel"
git push origin main

## COMANDOS DEBUG LOCAL
# Testar conex√£o Supabase
cd appclient
npm start
# Abrir: http://localhost:3000

# Ver logs do React
# (logs aparecem automaticamente no terminal)

## COMANDOS PARA ATUALIZAR APP
# Ap√≥s fazer mudan√ßas no c√≥digo:
cd appclient
vercel --prod

# Ou configurar deploy autom√°tico via Git:
git push origin main
# (Vercel faz deploy autom√°tico)
